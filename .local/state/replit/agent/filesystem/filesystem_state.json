{"file_contents":{"design_guidelines.md":{"content":"# Drops Trac Admin Dashboard Design Guidelines\n\n## Design Approach Documentation\n\n**Selected Approach**: Design System Approach using Material Design principles\n**Justification**: This is a utility-focused, information-dense enterprise application where efficiency and learnability are paramount. The dashboard handles complex hierarchical data and requires consistent, professional UI patterns.\n\n**Key Design Principles**:\n- Data clarity and hierarchy visualization\n- Efficient workflows for bulk operations\n- Multi-user collaboration indicators\n- Status-driven color coding\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors**:\n- Light Mode: 210 50% 45% (Professional blue)\n- Dark Mode: 210 40% 65% (Lighter blue for contrast)\n\n**Status Colors**:\n- Success/Pass: 142 76% 36% (Green)\n- Warning/Medium Severity: 45 93% 47% (Amber)\n- Error/High Severity: 0 84% 60% (Red)\n- Info/Low Severity: 217 91% 60% (Light blue)\n\n**Neutral Colors**:\n- Light Mode: Grays from 0 0% 95% to 0 0% 10%\n- Dark Mode: Grays from 210 20% 98% to 210 20% 8%\n\n### B. Typography\n\n**Font Family**: Inter (Google Fonts) for excellent readability in data-heavy interfaces\n**Hierarchy**:\n- Headers: 600 weight, sizes from text-3xl to text-lg\n- Body: 400 weight, text-sm and text-base\n- Data/Numbers: 500 weight, tabular-nums for alignment\n- Labels: 500 weight, text-xs and text-sm\n\n### C. Layout System\n\n**Spacing Units**: Tailwind units of 1, 2, 4, 6, 8, 12, 16\n- Component padding: p-4, p-6\n- Section margins: m-8, m-12\n- Element spacing: gap-2, gap-4\n- Large containers: p-8, p-16\n\n### D. Component Library\n\n**Navigation**:\n- Sidebar with collapsible sections\n- Breadcrumb navigation for hierarchy\n- Tab navigation for inspection details\n\n**Data Display**:\n- KPI cards with large numbers and trend indicators\n- Data tables with sorting, filtering, and pagination\n- Charts using subtle backgrounds with clear data points\n- Progress bars for completion status\n\n**Forms & Inputs**:\n- shadcn/ui components throughout\n- Clear validation states\n- Multi-select for inspector assignment\n- File upload areas with drag-and-drop\n\n**Overlays**:\n- Modal dialogs for forms and confirmations\n- Slide-over panels for inspection details\n- Toast notifications for bulk operations\n- Loading states with skeleton components\n\n**Status Indicators**:\n- Color-coded badges for severity levels\n- Progress indicators for inspection completion\n- Online/offline status for inspectors\n- Sync status indicators for cloud operations\n\n### E. Specific Features\n\n**Dashboard Layout**:\n- 4-column grid for KPI cards on desktop\n- Bar charts for severity distribution\n- Pie charts for pass/fail ratios\n- Sortable table for rig performance\n\n**Virtualized Checklist**:\n- Clean row design with clear pass/fail toggles\n- Expandable rows for notes and photos\n- Sticky header with progress indicator\n- Visual grouping for related items\n\n**Photo Management**:\n- Grid layout with thumbnails\n- Upload progress indicators\n- Size validation warnings\n- Quality indicators with color coding\n\n**Multi-Inspector Collaboration**:\n- Avatar indicators showing active inspectors\n- Real-time status updates\n- Conflict resolution UI for simultaneous edits\n- Activity timeline for changes\n\nNo custom animations - rely on shadcn/ui default transitions for professional consistency.","size_bytes":3307},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Drops Trac Admin Dashboard\n\n## Overview\n\nDrops Trac is a comprehensive inspection management system designed for oil rigs and industrial assets. It provides a modern web-based dashboard for managing inspections, tracking compliance, analyzing data, and generating reports. The application focuses on real-time collaboration, advanced reporting capabilities, and AI-powered features for smart severity assessment and predictive analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite as the build tool and development server\n- **UI Components**: Built with shadcn/ui component library using Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with a comprehensive design system supporting both light and dark themes\n- **State Management**: TanStack Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **API Pattern**: RESTful API structure with centralized route registration\n- **Storage Interface**: Abstracted storage layer with in-memory implementation for development\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL using Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema Management**: Centralized schema definitions with automatic TypeScript type inference\n- **Connection Pooling**: Neon serverless connection pooling for efficient database access\n\n### Authentication and Authorization\n- **Session Management**: PostgreSQL-backed session storage using connect-pg-simple\n- **User Model**: Basic user schema with username/password authentication (expandable for enterprise features)\n\n### Design System and Theming\n- **Design Approach**: Material Design principles optimized for data-dense enterprise applications\n- **Color System**: Professional blue primary palette with semantic status colors (success/green, warning/amber, error/red, info/blue)\n- **Typography**: Inter font family for excellent data readability with hierarchical text sizing\n- **Component Library**: Custom components built on Radix UI primitives including forms, data tables, charts, and specialized inspection components\n\n### Key Application Features\n- **Dashboard**: KPI cards, inspection tables, and data visualizations using Recharts\n- **Inspection Management**: Comprehensive inspection workflow with checklist views, photo galleries, and CAR (Corrective Action Request) panels\n- **AI-Powered Features**: Smart severity assessment, anomaly detection, predictive analytics, and automated summaries\n- **Virtual Scrolling**: Performance optimization for large datasets using react-window\n- **Real-time Updates**: Built-in infrastructure for live collaboration features\n\n## External Dependencies\n\n### Database and Infrastructure\n- **Neon Database**: Serverless PostgreSQL database with WebSocket support for real-time features\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Frontend Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives for building the component library\n- **Recharts**: Data visualization library for charts and analytics dashboards\n- **TanStack Query**: Server state management for efficient data fetching and caching\n- **React Hook Form**: Form handling with validation using Zod schemas\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Utility for building variant-based component APIs\n\n### Development and Build Tools\n- **Vite**: Fast development server and build tool with React plugin\n- **TypeScript**: Type safety across the entire application stack\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **ESBuild**: Fast bundling for production server builds\n\n### Asset Management\n- **Static Assets**: Images and generated assets stored in attached_assets directory\n- **Font Loading**: Google Fonts integration for Inter font family","size_bytes":4142},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { Header } from \"@/components/Header\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport InspectionsPage from \"@/pages/InspectionsPage\";\nimport InspectionDetailPage from \"@/pages/InspectionDetailPage\";\nimport NewInspectionPage from \"@/pages/NewInspectionPage\";\nimport SettingsPage from \"@/pages/SettingsPage\";\nimport SmartSeverityPage from \"@/pages/SmartSeverityPage\";\nimport AnomalyDetectionPage from \"@/pages/AnomalyDetectionPage\";\nimport PredictiveAnalyticsPage from \"@/pages/PredictiveAnalyticsPage\";\nimport AISummariesPage from \"@/pages/AISummariesPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardPage} />\n      <Route path=\"/inspections\" component={InspectionsPage} />\n      <Route path=\"/inspections/new\" component={NewInspectionPage} />\n      <Route path=\"/inspections/:id\" component={InspectionDetailPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route path=\"/ai/smart-severity\" component={SmartSeverityPage} />\n      <Route path=\"/ai/anomaly-detection\" component={AnomalyDetectionPage} />\n      <Route path=\"/ai/predictive-analytics\" component={PredictiveAnalyticsPage} />\n      <Route path=\"/ai/summaries\" component={AISummariesPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <ThemeProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1\">\n                <Header />\n                <main className=\"flex-1 overflow-auto p-6\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n        </ThemeProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2517},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 210 6% 12%;\n\n  --border: 210 4% 85%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 210 6% 12%;\n\n  --card-border: 210 4% 90%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 210 6% 12%;\n\n  --sidebar-border: 210 4% 88%;\n\n  --sidebar-primary: 210 50% 45%;\n\n  --sidebar-primary-foreground: 210 50% 98%;\n\n  --sidebar-accent: 0 0% 92%;\n\n  --sidebar-accent-foreground: 210 6% 15%;\n\n  --sidebar-ring: 210 50% 45%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 210 6% 12%;\n\n  --popover-border: 210 4% 82%;\n\n  --primary: 210 50% 45%;\n\n  --primary-foreground: 210 50% 98%;\n\n  --secondary: 0 0% 90%;\n\n  --secondary-foreground: 210 6% 15%;\n\n  --muted: 210 3% 94%;\n\n  --muted-foreground: 210 4% 45%;\n\n  --accent: 210 8% 92%;\n\n  --accent-foreground: 210 8% 20%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 210 4% 75%;\n  --ring: 210 50% 45%;\n  --chart-1: 210 50% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 45 93% 47%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 217 91% 60%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 6% / 0.03);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 6% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 6% / 0.03), 0px 1px 2px -1px hsl(210 20% 6% / 0.07);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 6% / 0.05), 0px 1px 2px -1px hsl(210 20% 6% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 6% / 0.08), 0px 2px 4px -1px hsl(210 20% 6% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 6% / 0.10), 0px 4px 6px -1px hsl(210 20% 6% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 6% / 0.12), 0px 8px 10px -1px hsl(210 20% 6% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 6% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 20% 8%;\n\n  --foreground: 210 20% 90%;\n\n  --border: 210 20% 18%;\n\n  --card: 210 20% 12%;\n\n  --card-foreground: 210 20% 90%;\n\n  --card-border: 210 20% 22%;\n\n  --sidebar: 210 20% 10%;\n\n  --sidebar-foreground: 210 20% 90%;\n\n  --sidebar-border: 210 20% 20%;\n\n  --sidebar-primary: 210 40% 65%;\n\n  --sidebar-primary-foreground: 210 40% 5%;\n\n  --sidebar-accent: 210 20% 16%;\n\n  --sidebar-accent-foreground: 210 20% 85%;\n\n  --sidebar-ring: 210 40% 65%;\n\n  --popover: 210 20% 14%;\n\n  --popover-foreground: 210 20% 90%;\n\n  --popover-border: 210 20% 24%;\n\n  --primary: 210 40% 65%;\n\n  --primary-foreground: 210 40% 5%;\n\n  --secondary: 210 20% 18%;\n\n  --secondary-foreground: 210 20% 85%;\n\n  --muted: 210 18% 16%;\n\n  --muted-foreground: 210 18% 60%;\n\n  --accent: 210 15% 20%;\n\n  --accent-foreground: 210 15% 80%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 210 20% 30%;\n  --ring: 210 40% 65%;\n  --chart-1: 210 50% 70%;\n  --chart-2: 142 76% 65%;\n  --chart-3: 45 93% 70%;\n  --chart-4: 0 84% 75%;\n  --chart-5: 217 91% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 98% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 98% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 98% / 0.00), 0px 1px 2px -1px hsl(210 20% 98% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 98% / 0.00), 0px 1px 2px -1px hsl(210 20% 98% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 98% / 0.00), 0px 2px 4px -1px hsl(210 20% 98% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 98% / 0.00), 0px 4px 6px -1px hsl(210 20% 98% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 98% / 0.00), 0px 8px 10px -1px hsl(210 20% 98% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 98% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10007},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CARPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Plus, Edit, Trash2, User, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface CAR {\n  id: string;\n  title: string;\n  description: string;\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\n  status: \"pending\" | \"in-progress\" | \"completed\";\n  assignedTo: string;\n  createdBy: string;\n  createdAt: Date;\n  dueDate: Date;\n  actions: CARAction[];\n}\n\ninterface CARAction {\n  id: string;\n  description: string;\n  completedBy?: string;\n  completedAt?: Date;\n  status: \"pending\" | \"completed\";\n}\n\n//todo: remove mock functionality\nconst mockCARs: CAR[] = [\n  {\n    id: \"CAR-001\",\n    title: \"Pressure relief valve malfunction\",\n    description: \"Safety valve failed to operate within specified parameters during testing\",\n    severity: \"high\",\n    status: \"pending\", \n    assignedTo: \"John Smith\",\n    createdBy: \"Sarah Jones\",\n    createdAt: new Date(\"2024-01-15\"),\n    dueDate: new Date(\"2024-01-22\"),\n    actions: [\n      {\n        id: \"ACT-001\",\n        description: \"Replace faulty valve components\",\n        status: \"pending\",\n      },\n      {\n        id: \"ACT-002\", \n        description: \"Conduct pressure test verification\",\n        status: \"pending\",\n      },\n    ],\n  },\n  {\n    id: \"CAR-002\",\n    title: \"Structural weld defect identified\",\n    description: \"Minor weld imperfection found during routine inspection\",\n    severity: \"medium\",\n    status: \"in-progress\",\n    assignedTo: \"Mike Wilson\", \n    createdBy: \"Lisa Chen\",\n    createdAt: new Date(\"2024-01-14\"),\n    dueDate: new Date(\"2024-01-28\"),\n    actions: [\n      {\n        id: \"ACT-003\",\n        description: \"Schedule repair work\",\n        completedBy: \"Mike Wilson\",\n        completedAt: new Date(\"2024-01-16\"),\n        status: \"completed\",\n      },\n      {\n        id: \"ACT-004\",\n        description: \"Perform weld repair\",\n        status: \"pending\",\n      },\n    ],\n  },\n];\n\nexport function CARPanel() {\n  const [cars, setCars] = useState<CAR[]>(mockCARs);\n  const [isCreating, setIsCreating] = useState(false);\n  const [newCAR, setNewCAR] = useState({\n    title: \"\",\n    description: \"\",\n    severity: \"medium\" as const,\n    assignedTo: \"\",\n    dueDate: \"\",\n  });\n\n  const handleCreateCAR = () => {\n    if (!newCAR.title.trim()) return;\n    \n    const car: CAR = {\n      id: `CAR-${String(cars.length + 1).padStart(3, '0')}`,\n      title: newCAR.title,\n      description: newCAR.description,\n      severity: newCAR.severity,\n      status: \"pending\",\n      assignedTo: newCAR.assignedTo,\n      createdBy: \"Current User\",\n      createdAt: new Date(),\n      dueDate: new Date(newCAR.dueDate),\n      actions: [],\n    };\n    \n    setCars(prev => [...prev, car]);\n    setNewCAR({ title: \"\", description: \"\", severity: \"medium\", assignedTo: \"\", dueDate: \"\" });\n    setIsCreating(false);\n    console.log(\"Created new CAR:\", car);\n  };\n\n  const updateCARStatus = (id: string, status: \"pending\" | \"in-progress\" | \"completed\") => {\n    setCars(prev => prev.map(car => car.id === id ? { ...car, status } : car));\n    console.log(`Updated CAR ${id} status to ${status}`);\n  };\n\n  const addAction = (carId: string, description: string) => {\n    setCars(prev => prev.map(car => \n      car.id === carId \n        ? {\n            ...car,\n            actions: [\n              ...car.actions,\n              {\n                id: `ACT-${Date.now()}`,\n                description,\n                status: \"pending\" as const,\n              }\n            ]\n          }\n        : car\n    ));\n    console.log(`Added action to CAR ${carId}:`, description);\n  };\n\n  const completeAction = (carId: string, actionId: string) => {\n    setCars(prev => prev.map(car => \n      car.id === carId\n        ? {\n            ...car,\n            actions: car.actions.map(action =>\n              action.id === actionId\n                ? {\n                    ...action,\n                    status: \"completed\" as const,\n                    completedBy: \"Current User\",\n                    completedAt: new Date(),\n                  }\n                : action\n            )\n          }\n        : car\n    ));\n    console.log(`Completed action ${actionId} for CAR ${carId}`);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Corrective Action Requests (CARs)\n            <Button \n              onClick={() => setIsCreating(true)}\n              data-testid=\"button-create-car\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New CAR\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isCreating && (\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Create New CAR</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Input\n                  placeholder=\"CAR Title\"\n                  value={newCAR.title}\n                  onChange={(e) => setNewCAR(prev => ({ ...prev, title: e.target.value }))}\n                  data-testid=\"input-car-title\"\n                />\n                \n                <Textarea\n                  placeholder=\"Description of the issue\"\n                  value={newCAR.description}\n                  onChange={(e) => setNewCAR(prev => ({ ...prev, description: e.target.value }))}\n                  data-testid=\"textarea-car-description\"\n                />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Severity</label>\n                    <select\n                      value={newCAR.severity}\n                      onChange={(e) => setNewCAR(prev => ({ ...prev, severity: e.target.value as any }))}\n                      className=\"w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n                      data-testid=\"select-car-severity\"\n                    >\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                      <option value=\"critical\">Critical</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Assigned To</label>\n                    <Input\n                      placeholder=\"Inspector name\"\n                      value={newCAR.assignedTo}\n                      onChange={(e) => setNewCAR(prev => ({ ...prev, assignedTo: e.target.value }))}\n                      data-testid=\"input-car-assigned-to\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Due Date</label>\n                  <Input\n                    type=\"date\"\n                    value={newCAR.dueDate}\n                    onChange={(e) => setNewCAR(prev => ({ ...prev, dueDate: e.target.value }))}\n                    data-testid=\"input-car-due-date\"\n                  />\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button onClick={handleCreateCAR} data-testid=\"button-save-car\">\n                    Create CAR\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsCreating(false)}\n                    data-testid=\"button-cancel-car\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          <div className=\"space-y-4\">\n            {cars.map((car) => (\n              <Card key={car.id} className=\"hover-elevate\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold\">{car.id}</h3>\n                        <StatusBadge status={car.status} />\n                        <StatusBadge severity={car.severity} variant=\"severity\" />\n                      </div>\n                      <h4 className=\"text-lg font-medium\">{car.title}</h4>\n                      <p className=\"text-muted-foreground\">{car.description}</p>\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant={car.status === \"in-progress\" ? \"default\" : \"outline\"}\n                        onClick={() => updateCARStatus(car.id, \"in-progress\")}\n                        data-testid={`button-progress-${car.id}`}\n                      >\n                        In Progress\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant={car.status === \"completed\" ? \"default\" : \"outline\"}\n                        onClick={() => updateCARStatus(car.id, \"completed\")}\n                        data-testid={`button-complete-${car.id}`}\n                      >\n                        Complete\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>Assigned to: {car.assignedTo}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>Due: {format(car.dueDate, \"MMM dd, yyyy\")}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h5 className=\"font-medium\">Actions:</h5>\n                    {car.actions.map((action) => (\n                      <div key={action.id} className=\"flex items-center justify-between p-2 bg-muted/50 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <p className={`text-sm ${action.status === \"completed\" ? \"line-through text-muted-foreground\" : \"\"}`}>\n                            {action.description}\n                          </p>\n                          {action.completedBy && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              Completed by {action.completedBy} on {format(action.completedAt!, \"MMM dd\")}\n                            </p>\n                          )}\n                        </div>\n                        {action.status === \"pending\" && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => completeAction(car.id, action.id)}\n                            data-testid={`button-complete-action-${action.id}`}\n                          >\n                            Complete\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                    \n                    <div className=\"flex gap-2 mt-2\">\n                      <Input\n                        placeholder=\"Add new action...\"\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\" && e.currentTarget.value.trim()) {\n                            addAction(car.id, e.currentTarget.value);\n                            e.currentTarget.value = \"\";\n                          }\n                        }}\n                        data-testid={`input-add-action-${car.id}`}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12609},"client/src/components/ChecklistView.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { Check, X, Camera, AlertCircle, Search } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface ChecklistItem {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  status: \"pass\" | \"fail\" | \"pending\";\n  severity?: \"low\" | \"medium\" | \"high\" | \"critical\";\n  notes?: string;\n  photos: string[];\n}\n\n//todo: remove mock functionality\nconst generateMockItems = (count: number): ChecklistItem[] => {\n  const categories = [\"Safety Systems\", \"Structural Integrity\", \"Equipment Status\", \"Environmental\", \"Operations\"];\n  const titles = [\n    \"Pressure relief valve operation\",\n    \"Emergency shutdown system test\",\n    \"Structural weld inspection\",\n    \"Fire suppression system check\",\n    \"Equipment vibration analysis\",\n  ];\n  \n  return Array.from({ length: count }, (_, i) => ({\n    id: `ITEM-${String(i + 1).padStart(4, '0')}`,\n    title: titles[i % titles.length],\n    description: `Detailed inspection of ${titles[i % titles.length].toLowerCase()}`,\n    category: categories[i % categories.length],\n    status: [\"pass\", \"fail\", \"pending\"][Math.floor(Math.random() * 3)] as \"pass\" | \"fail\" | \"pending\",\n    severity: Math.random() > 0.7 ? ([\"low\", \"medium\", \"high\", \"critical\"][Math.floor(Math.random() * 4)] as any) : undefined,\n    notes: Math.random() > 0.5 ? \"Additional inspection notes...\" : undefined,\n    photos: Math.random() > 0.6 ? [`photo-${i}-1.jpg`, `photo-${i}-2.jpg`] : [],\n  }));\n};\n\nexport function ChecklistView() {\n  const [items] = useState(() => generateMockItems(5000));\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n\n  const filteredItems = useMemo(() => {\n    return items.filter(item => {\n      const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           item.category.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = selectedStatus === \"all\" || item.status === selectedStatus;\n      return matchesSearch && matchesStatus;\n    });\n  }, [items, searchTerm, selectedStatus]);\n\n  const completedItems = items.filter(item => item.status !== \"pending\").length;\n  const completionRate = Math.round((completedItems / items.length) * 100);\n\n  const updateItemStatus = (id: string, status: \"pass\" | \"fail\" | \"pending\") => {\n    console.log(`Update item ${id} status to ${status}`);\n  };\n\n  const updateItemNotes = (id: string, notes: string) => {\n    console.log(`Update item ${id} notes:`, notes);\n  };\n\n  const ItemRow = ({ item }: { item: ChecklistItem }) => {\n    return (\n      <div className=\"px-4 border-b border-border\">\n        <div className=\"py-4 flex items-start gap-4\">\n          <div className=\"flex gap-2\">\n            <Button\n              size=\"sm\"\n              variant={item.status === \"pass\" ? \"default\" : \"outline\"}\n              onClick={() => updateItemStatus(item.id, \"pass\")}\n              data-testid={`button-pass-${item.id}`}\n            >\n              <Check className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant={item.status === \"fail\" ? \"destructive\" : \"outline\"}\n              onClick={() => updateItemStatus(item.id, \"fail\")}\n              data-testid={`button-fail-${item.id}`}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <h4 className=\"font-medium text-sm\">{item.title}</h4>\n                  <StatusBadge status={item.status} />\n                  {item.severity && <StatusBadge severity={item.severity} variant=\"severity\" />}\n                </div>\n                <p className=\"text-xs text-muted-foreground mb-2\">{item.description}</p>\n                <p className=\"text-xs text-muted-foreground\">Category: {item.category}</p>\n              </div>\n              \n              <div className=\"flex items-center gap-2 ml-4\">\n                {item.photos.length > 0 && (\n                  <Button size=\"icon\" variant=\"outline\" className=\"h-8 w-8\">\n                    <Camera className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">View photos</span>\n                  </Button>\n                )}\n                {item.status === \"fail\" && (\n                  <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                )}\n              </div>\n            </div>\n            \n            {item.notes && (\n              <div className=\"mt-2\">\n                <Textarea\n                  value={item.notes}\n                  onChange={(e) => updateItemNotes(item.id, e.target.value)}\n                  placeholder=\"Add inspection notes...\"\n                  className=\"min-h-[60px] text-xs\"\n                  data-testid={`textarea-notes-${item.id}`}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"h-[800px] flex flex-col\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Inspection Checklist</span>\n          <div className=\"flex items-center gap-4\">\n            <Progress value={completionRate} className=\"w-32\" />\n            <span className=\"text-sm text-muted-foreground\">{completionRate}% Complete</span>\n          </div>\n        </CardTitle>\n        \n        <div className=\"flex gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search checklist items...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-checklist\"\n            />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            {[\"all\", \"pass\", \"fail\", \"pending\"].map((status) => (\n              <Button\n                key={status}\n                size=\"sm\"\n                variant={selectedStatus === status ? \"default\" : \"outline\"}\n                onClick={() => setSelectedStatus(status)}\n                data-testid={`button-filter-${status}`}\n              >\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 p-0\">\n        <ScrollArea className=\"h-[600px]\">\n          <div className=\"space-y-0\">\n            {filteredItems.slice(0, 50).map((item) => (\n              <ItemRow key={item.id} item={item} />\n            ))}\n            {filteredItems.length > 50 && (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                <p>Showing first 50 items of {filteredItems.length} total</p>\n                <p className=\"text-xs\">Use search to narrow results</p>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7579},"client/src/components/Dashboard.tsx":{"content":"import { KPICard } from \"./KPICard\";\nimport { InspectionTable } from \"./InspectionTable\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, Clock, AlertTriangle, Calendar, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\n\n//todo: remove mock functionality\nconst severityData = [\n  { name: \"Low\", count: 45, fill: \"hsl(var(--chart-2))\" },\n  { name: \"Medium\", count: 23, fill: \"hsl(var(--chart-3))\" },\n  { name: \"High\", count: 12, fill: \"hsl(var(--chart-4))\" },\n  { name: \"Critical\", count: 3, fill: \"hsl(var(--destructive))\" },\n];\n\nconst passFailData = [\n  { name: \"Pass\", value: 78, fill: \"hsl(var(--chart-2))\" },\n  { name: \"Fail\", value: 22, fill: \"hsl(var(--chart-4))\" },\n];\n\nexport function Dashboard() {\n  return (\n    <div className=\"space-y-6\">\n      {/* KPI Cards */}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        <KPICard\n          title=\"Total Inspections\"\n          value=\"1,247\"\n          change={{ value: 12, type: \"increase\" }}\n          icon={CheckCircle}\n          description=\"This month\"\n        />\n        <KPICard\n          title=\"Pending Reviews\"\n          value=\"23\"\n          change={{ value: 5, type: \"decrease\" }}\n          icon={Clock}\n          description=\"Awaiting approval\"\n        />\n        <KPICard\n          title=\"Critical Issues\"\n          value=\"8\"\n          change={{ value: 15, type: \"increase\" }}\n          icon={AlertTriangle}\n          description=\"Requires attention\"\n        />\n        <KPICard\n          title=\"Pass Rate\"\n          value=\"78%\"\n          change={{ value: 3, type: \"increase\" }}\n          icon={CheckCircle}\n          description=\"Overall compliance\"\n        />\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n          <CardDescription>\n            Filter inspections by date range, rig, inspector, or severity level\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Date Range</label>\n              <div className=\"flex gap-2\">\n                <Input type=\"date\" placeholder=\"From\" data-testid=\"input-date-from\" />\n                <Input type=\"date\" placeholder=\"To\" data-testid=\"input-date-to\" />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Rig</label>\n              <Select>\n                <SelectTrigger data-testid=\"select-rig\">\n                  <SelectValue placeholder=\"Select rig\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Rigs</SelectItem>\n                  <SelectItem value=\"deepwater-horizon-ii\">Deep Water Horizon II</SelectItem>\n                  <SelectItem value=\"ocean-explorer\">Ocean Explorer</SelectItem>\n                  <SelectItem value=\"north-sea-pioneer\">North Sea Pioneer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Inspector</label>\n              <Select>\n                <SelectTrigger data-testid=\"select-inspector\">\n                  <SelectValue placeholder=\"Select inspector\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Inspectors</SelectItem>\n                  <SelectItem value=\"john-smith\">John Smith</SelectItem>\n                  <SelectItem value=\"sarah-jones\">Sarah Jones</SelectItem>\n                  <SelectItem value=\"mike-wilson\">Mike Wilson</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Severity</label>\n              <Select>\n                <SelectTrigger data-testid=\"select-severity\">\n                  <SelectValue placeholder=\"Select severity\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"critical\">Critical</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"flex gap-2 mt-4\">\n            <Button data-testid=\"button-apply-filters\">Apply Filters</Button>\n            <Button variant=\"outline\" data-testid=\"button-reset-filters\">Reset</Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Charts */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Issues by Severity</CardTitle>\n            <CardDescription>Distribution of inspection findings</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={severityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"count\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Pass/Fail Ratio</CardTitle>\n            <CardDescription>Overall inspection outcomes</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={passFailData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  dataKey=\"value\"\n                  label={({ name, value }) => `${name}: ${value}%`}\n                >\n                  {passFailData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Inspections */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Inspections</CardTitle>\n          <CardDescription>Latest inspection activities across all rigs</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <InspectionTable />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7162},"client/src/components/Header.tsx":{"content":"import { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Bell, Search, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function Header() {\n  return (\n    <header className=\"flex items-center justify-between p-4 border-b bg-background\">\n      <div className=\"flex items-center gap-4\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search inspections, rigs, or reports...\"\n            className=\"pl-10 w-80\"\n            data-testid=\"input-search\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n          <Bell className=\"h-5 w-5\" />\n          <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\">\n            3\n          </Badge>\n        </Button>\n        \n        <ThemeToggle />\n        \n        <Avatar data-testid=\"avatar-user\">\n          <AvatarImage src=\"/placeholder-avatar.jpg\" alt=\"User\" />\n          <AvatarFallback>\n            <User className=\"h-4 w-4\" />\n          </AvatarFallback>\n        </Avatar>\n      </div>\n    </header>\n  );\n}","size_bytes":1615},"client/src/components/InspectionTable.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Eye, Edit, Download } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n//todo: remove mock functionality\nconst mockInspections = [\n  {\n    id: \"INS-001\",\n    rigName: \"Deep Water Horizon II\",\n    inspectors: [{ name: \"John Smith\", avatar: null }, { name: \"Sarah Jones\", avatar: null }],\n    date: new Date(\"2024-01-15\"),\n    status: \"completed\" as const,\n    severity: \"medium\" as const,\n    completionRate: 95,\n    issues: 3,\n  },\n  {\n    id: \"INS-002\", \n    rigName: \"Ocean Explorer\",\n    inspectors: [{ name: \"Mike Wilson\", avatar: null }],\n    date: new Date(\"2024-01-14\"),\n    status: \"in-progress\" as const,\n    severity: \"low\" as const,\n    completionRate: 65,\n    issues: 1,\n  },\n  {\n    id: \"INS-003\",\n    rigName: \"North Sea Pioneer\",\n    inspectors: [{ name: \"Lisa Chen\", avatar: null }, { name: \"David Brown\", avatar: null }],\n    date: new Date(\"2024-01-13\"),\n    status: \"fail\" as const,\n    severity: \"high\" as const,\n    completionRate: 100,\n    issues: 8,\n  },\n];\n\nexport function InspectionTable() {\n  const handleView = (id: string) => {\n    console.log(\"View inspection:\", id);\n  };\n\n  const handleEdit = (id: string) => {\n    console.log(\"Edit inspection:\", id);\n  };\n\n  const handleDownload = (id: string) => {\n    console.log(\"Download inspection report:\", id);\n  };\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Inspection ID</TableHead>\n            <TableHead>Rig</TableHead>\n            <TableHead>Inspectors</TableHead>\n            <TableHead>Date</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>Severity</TableHead>\n            <TableHead>Completion</TableHead>\n            <TableHead>Issues</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {mockInspections.map((inspection) => (\n            <TableRow \n              key={inspection.id} \n              className=\"hover-elevate\"\n              data-testid={`row-inspection-${inspection.id}`}\n            >\n              <TableCell className=\"font-medium\">{inspection.id}</TableCell>\n              <TableCell>{inspection.rigName}</TableCell>\n              <TableCell>\n                <div className=\"flex -space-x-2\">\n                  {inspection.inspectors.map((inspector, idx) => (\n                    <Avatar key={idx} className=\"h-8 w-8 border-2 border-background\">\n                      <AvatarImage src={inspector.avatar || undefined} />\n                      <AvatarFallback className=\"text-xs\">\n                        {inspector.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                  ))}\n                </div>\n              </TableCell>\n              <TableCell>{format(inspection.date, \"MMM dd, yyyy\")}</TableCell>\n              <TableCell>\n                <StatusBadge status={inspection.status} />\n              </TableCell>\n              <TableCell>\n                <StatusBadge severity={inspection.severity} variant=\"severity\" />\n              </TableCell>\n              <TableCell>{inspection.completionRate}%</TableCell>\n              <TableCell>\n                <span className={inspection.issues > 5 ? \"text-destructive font-medium\" : \"\"}>\n                  {inspection.issues}\n                </span>\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <div className=\"flex justify-end gap-2\">\n                  <Button \n                    size=\"icon\" \n                    variant=\"ghost\"\n                    onClick={() => handleView(inspection.id)}\n                    data-testid={`button-view-${inspection.id}`}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    size=\"icon\" \n                    variant=\"ghost\"\n                    onClick={() => handleEdit(inspection.id)}\n                    data-testid={`button-edit-${inspection.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    size=\"icon\" \n                    variant=\"ghost\"\n                    onClick={() => handleDownload(inspection.id)}\n                    data-testid={`button-download-${inspection.id}`}\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}","size_bytes":4928},"client/src/components/KPICard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface KPICardProps {\n  title: string;\n  value: string | number;\n  change?: {\n    value: number;\n    type: \"increase\" | \"decrease\";\n  };\n  icon: LucideIcon;\n  description?: string;\n}\n\nexport function KPICard({ title, value, change, icon: Icon, description }: KPICardProps) {\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-kpi-${title.toLowerCase().replace(' ', '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {change && (\n          <div className=\"flex items-center gap-2 mt-1\">\n            <Badge \n              variant={change.type === \"increase\" ? \"default\" : \"destructive\"}\n              className=\"text-xs\"\n            >\n              {change.type === \"increase\" ? \"+\" : \"\"}{change.value}%\n            </Badge>\n            <span className=\"text-xs text-muted-foreground\">from last month</span>\n          </div>\n        )}\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1461},"client/src/components/PhotoGallery.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, X, AlertCircle, Check } from \"lucide-react\";\nimport rigImage from \"@assets/generated_images/Oil_rig_platform_3ff05d82.png\";\n\ninterface Photo {\n  id: string;\n  name: string;\n  size: number;\n  status: \"uploading\" | \"completed\" | \"error\" | \"oversized\";\n  progress?: number;\n  url?: string;\n  quality?: \"good\" | \"warning\" | \"poor\";\n}\n\n//todo: remove mock functionality\nconst mockPhotos: Photo[] = [\n  {\n    id: \"1\",\n    name: \"safety_valve_inspection.jpg\",\n    size: 856000,\n    status: \"completed\",\n    url: rigImage,\n    quality: \"good\",\n  },\n  {\n    id: \"2\", \n    name: \"structural_check_wide.jpg\",\n    size: 1200000,\n    status: \"oversized\",\n    quality: \"warning\",\n  },\n  {\n    id: \"3\",\n    name: \"equipment_detail.jpg\", \n    size: 645000,\n    status: \"uploading\",\n    progress: 65,\n  },\n];\n\nexport function PhotoGallery() {\n  const [photos, setPhotos] = useState<Photo[]>(mockPhotos);\n  \n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n    \n    Array.from(files).forEach((file) => {\n      const isOversized = file.size > 1000000; // 1MB limit\n      const newPhoto: Photo = {\n        id: Date.now().toString() + Math.random(),\n        name: file.name,\n        size: file.size,\n        status: isOversized ? \"oversized\" : \"uploading\",\n        progress: isOversized ? undefined : 0,\n      };\n      \n      setPhotos(prev => [...prev, newPhoto]);\n      \n      if (!isOversized) {\n        // Simulate upload progress\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += Math.random() * 30;\n          if (progress >= 100) {\n            progress = 100;\n            clearInterval(interval);\n            setPhotos(prev => prev.map(p => \n              p.id === newPhoto.id \n                ? { ...p, status: \"completed\", progress: 100, url: rigImage, quality: \"good\" }\n                : p\n            ));\n          } else {\n            setPhotos(prev => prev.map(p => \n              p.id === newPhoto.id ? { ...p, progress } : p\n            ));\n          }\n        }, 200);\n      }\n    });\n    \n    // Clear input\n    event.target.value = '';\n  };\n\n  const removePhoto = (id: string) => {\n    setPhotos(prev => prev.filter(p => p.id !== id));\n  };\n\n  const formatFileSize = (bytes: number) => {\n    return bytes > 1000000 \n      ? `${(bytes / 1000000).toFixed(1)} MB` \n      : `${Math.round(bytes / 1000)} KB`;\n  };\n\n  const getQualityIcon = (quality?: string) => {\n    switch (quality) {\n      case \"good\":\n        return <Check className=\"h-4 w-4 text-green-500\" />;\n      case \"warning\": \n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n      case \"poor\":\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          Photo Gallery\n          <Badge variant=\"secondary\">\n            {photos.filter(p => p.status === \"completed\").length} / {photos.length} uploaded\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        \n        {/* Upload Area */}\n        <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center hover-elevate\">\n          <input\n            type=\"file\"\n            multiple\n            accept=\"image/*\"\n            onChange={handleFileUpload}\n            className=\"hidden\"\n            id=\"photo-upload\"\n            data-testid=\"input-photo-upload\"\n          />\n          <label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n            <Upload className=\"mx-auto h-8 w-8 text-muted-foreground mb-2\" />\n            <p className=\"text-sm font-medium\">Upload inspection photos</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Drag and drop files or click to browse. Max 1MB per photo.\n            </p>\n          </label>\n        </div>\n\n        {/* Photo Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n          {photos.map((photo) => (\n            <div key={photo.id} className=\"relative group\">\n              <Card className={`overflow-hidden ${photo.status === \"oversized\" ? \"border-destructive\" : \"\"}`}>\n                <div className=\"aspect-square bg-muted flex items-center justify-center\">\n                  {photo.url ? (\n                    <img \n                      src={photo.url} \n                      alt={photo.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"text-muted-foreground\">\n                      {photo.status === \"uploading\" ? \"Uploading...\" : \"No preview\"}\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"p-2\">\n                  <div className=\"flex items-start justify-between mb-1\">\n                    <p className=\"text-xs font-medium truncate flex-1\">{photo.name}</p>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => removePhoto(photo.id)}\n                      className=\"h-6 w-6 opacity-0 group-hover:opacity-100\"\n                      data-testid={`button-remove-${photo.id}`}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                    <span className={photo.size > 1000000 ? \"text-destructive\" : \"\"}>\n                      {formatFileSize(photo.size)}\n                    </span>\n                    {photo.quality && getQualityIcon(photo.quality)}\n                  </div>\n                  \n                  {photo.status === \"uploading\" && photo.progress !== undefined && (\n                    <Progress value={photo.progress} className=\"mt-2 h-1\" />\n                  )}\n                  \n                  {photo.status === \"oversized\" && (\n                    <Badge variant=\"destructive\" className=\"mt-1 text-xs\">\n                      File too large\n                    </Badge>\n                  )}\n                  \n                  {photo.quality === \"warning\" && (\n                    <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                      Quality warning\n                    </Badge>\n                  )}\n                </div>\n              </Card>\n            </div>\n          ))}\n        </div>\n        \n        {photos.length === 0 && (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>No photos uploaded yet</p>\n            <p className=\"text-sm\">Add photos to document inspection findings</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7218},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ntype Status = \"pass\" | \"fail\" | \"pending\" | \"in-progress\" | \"completed\";\ntype Severity = \"low\" | \"medium\" | \"high\" | \"critical\";\n\ninterface StatusBadgeProps {\n  status?: Status;\n  severity?: Severity;\n  variant?: \"status\" | \"severity\";\n  children?: React.ReactNode;\n  className?: string;\n}\n\nexport function StatusBadge({ \n  status, \n  severity, \n  variant = \"status\", \n  children, \n  className \n}: StatusBadgeProps) {\n  const getStatusVariant = (status: Status) => {\n    switch (status) {\n      case \"pass\":\n      case \"completed\":\n        return \"default\";\n      case \"fail\":\n        return \"destructive\";\n      case \"pending\":\n      case \"in-progress\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getSeverityColor = (severity: Severity) => {\n    switch (severity) {\n      case \"low\":\n        return \"bg-chart-2 text-white\";\n      case \"medium\":\n        return \"bg-chart-3 text-white\";\n      case \"high\":\n        return \"bg-chart-4 text-white\";\n      case \"critical\":\n        return \"bg-destructive text-destructive-foreground\";\n      default:\n        return \"\";\n    }\n  };\n\n  if (variant === \"severity\" && severity) {\n    return (\n      <Badge \n        className={cn(getSeverityColor(severity), className)}\n        data-testid={`badge-severity-${severity}`}\n      >\n        {children || severity.toUpperCase()}\n      </Badge>\n    );\n  }\n\n  if (status) {\n    return (\n      <Badge \n        variant={getStatusVariant(status)}\n        className={className}\n        data-testid={`badge-status-${status}`}\n      >\n        {children || status.replace(\"-\", \" \").toUpperCase()}\n      </Badge>\n    );\n  }\n\n  return (\n    <Badge variant=\"outline\" className={className}>\n      {children || \"Unknown\"}\n    </Badge>\n  );\n}","size_bytes":1838},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};","size_bytes":1179},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\" \n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":655},"client/src/components/app-sidebar.tsx":{"content":"import { BarChart3, Calendar, CheckSquare, Home, Settings, FileText, Upload, Users, Brain, AlertTriangle, TrendingUp, FileBarChart } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { useLocation, Link } from \"wouter\";\nimport dropsTracLogo from \"@assets/generated_images/Drops_Trac_logo_bc94c0a8.png\";\n\nconst items = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Inspections\",\n    url: \"/inspections\",\n    icon: CheckSquare,\n  },\n  {\n    title: \"New Inspection\",\n    url: \"/inspections/new\",\n    icon: Calendar,\n  },\n  {\n    title: \"Checklists\",\n    url: \"/checklists\",\n    icon: FileText,\n  },\n  {\n    title: \"Reports\",\n    url: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Cloud Sync\",\n    url: \"/sync\",\n    icon: Upload,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nconst aiItems = [\n  {\n    title: \"Smart Severity & Recommendation\",\n    url: \"/ai/smart-severity\",\n    icon: Brain,\n  },\n  {\n    title: \"Anomaly Detection\",\n    url: \"/ai/anomaly-detection\",\n    icon: AlertTriangle,\n  },\n  {\n    title: \"Predictive Analytics\",\n    url: \"/ai/predictive-analytics\",\n    icon: TrendingUp,\n  },\n  {\n    title: \"AI Summaries\",\n    url: \"/ai/summaries\",\n    icon: FileBarChart,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <div className=\"flex items-center gap-3\">\n          <img src={dropsTracLogo} alt=\"Drops Trac\" className=\"h-8 w-8 object-contain\" />\n          <div>\n            <h1 className=\"font-semibold text-lg\">Drops Trac</h1>\n            <p className=\"text-sm text-muted-foreground\">Admin Dashboard</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Link href={item.url} className={location === item.url ? 'bg-sidebar-accent' : ''}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel>AI Features</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {aiItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    data-testid={`link-${item.title.toLowerCase().replace(/ & | /g, '-')}`}\n                  >\n                    <Link href={item.url} className={location === item.url ? 'bg-sidebar-accent' : ''}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3604},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AISummariesPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileBarChart, Download, Share, Calendar, TrendingUp, AlertTriangle, CheckCircle, Users, Clock } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, AreaChart, Area, PieChart, Pie, Cell, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from \"recharts\";\n\nconst dailySummary = {\n  date: \"2024-01-15\",\n  totalInspections: 13,\n  criticalIssues: 4,\n  majorIssues: 8,\n  minorIssues: 15,\n  passRate: 76,\n  topIssue: \"missing secondary retention\",\n  affectedRigs: [\"Rig-02\", \"Rig-05\"],\n  inspectorEfficiency: 94,\n  timeSpent: 127, // minutes\n  complianceScore: 88\n};\n\nconst weeklySummary = {\n  week: \"Week of Jan 8-14, 2024\",\n  totalInspections: 89,\n  trendsAnalysis: {\n    criticalIncreased: true,\n    percentChange: 23,\n    primaryCause: \"Aging equipment in offshore rigs\"\n  },\n  topPerformer: \"Lisa Chen\",\n  riskCategories: [\n    { category: \"Safety Systems\", score: 92 },\n    { category: \"Mechanical\", score: 78 },\n    { category: \"Electrical\", score: 85 },\n    { category: \"Structural\", score: 91 }\n  ],\n  recommendations: [\n    \"Schedule maintenance for Rig-02 pressure systems\",\n    \"Increase inspection frequency for wire rope components\",\n    \"Conduct safety training for new inspectors\"\n  ]\n};\n\nconst executiveSummary = {\n  period: \"Q4 2023 Executive Summary\",\n  kpis: [\n    { metric: \"Overall Compliance\", value: 87, target: 90, trend: \"up\" },\n    { metric: \"Critical Issues\", value: 156, target: 120, trend: \"up\" },\n    { metric: \"Inspection Efficiency\", value: 94, target: 85, trend: \"up\" },\n    { metric: \"Cost Savings\", value: 2.3, target: 2.0, trend: \"up\", unit: \"M\" }\n  ],\n  narrative: `During Q4 2023, Drops Trac managed 1,247 inspections across 6 drilling rigs with an overall compliance rate of 87%. \n  While critical issues increased by 23% compared to Q3, inspection efficiency improved significantly, saving an estimated $2.3M in potential downtime costs. \n  The AI-powered severity prediction system achieved 92% accuracy, enabling proactive maintenance decisions.`,\n  boardRecommendations: [\n    \"Invest in preventive maintenance programs for aging equipment\",\n    \"Expand AI analytics capabilities to additional rig locations\", \n    \"Consider staff augmentation for high-risk operational periods\"\n  ]\n};\n\nconst inspectionTrends = [\n  { month: \"Jul\", inspections: 234, issues: 45, compliance: 85 },\n  { month: \"Aug\", inspections: 267, issues: 52, compliance: 82 },\n  { month: \"Sep\", inspections: 298, issues: 48, compliance: 87 },\n  { month: \"Oct\", inspections: 312, issues: 61, compliance: 84 },\n  { month: \"Nov\", inspections: 289, issues: 39, compliance: 91 },\n  { month: \"Dec\", inspections: 298, issues: 44, compliance: 89 }\n];\n\nconst rigPerformance = [\n  { rig: \"Rig-001\", score: 89 },\n  { rig: \"Rig-002\", score: 76 },\n  { rig: \"Rig-003\", score: 92 },\n  { rig: \"Rig-004\", score: 84 },\n  { rig: \"Rig-005\", score: 88 },\n  { rig: \"Rig-006\", score: 81 }\n];\n\nconst complianceBreakdown = [\n  { area: \"Safety\", score: 95 },\n  { area: \"Environmental\", score: 88 },\n  { area: \"Quality\", score: 91 },\n  { area: \"Regulatory\", score: 84 },\n  { area: \"Operational\", score: 87 }\n];\n\nconst issueDistribution = [\n  { severity: \"Critical\", count: 23, color: \"#ef4444\" },\n  { severity: \"Major\", count: 67, color: \"#f97316\" },\n  { severity: \"Minor\", count: 134, color: \"#eab308\" },\n  { severity: \"Info\", count: 198, color: \"#22c55e\" }\n];\n\nconst getTrendIcon = (trend: string) => {\n  return trend === \"up\" ? <TrendingUp className=\"h-4 w-4 text-green-600\" /> : <TrendingUp className=\"h-4 w-4 text-red-600 rotate-180\" />;\n};\n\nconst getComplianceColor = (score: number) => {\n  if (score >= 90) return \"text-green-600\";\n  if (score >= 80) return \"text-yellow-600\";\n  return \"text-red-600\";\n};\n\nexport default function AISummariesPage() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"daily\");\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const handleGenerateReport = async () => {\n    setIsGenerating(true);\n    setTimeout(() => setIsGenerating(false), 2500);\n  };\n\n  const handleExportReport = () => {\n    // Export functionality would be implemented here\n    console.log(\"Exporting report...\");\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-ai-summaries\">AI Summaries</h1>\n          <p className=\"text-muted-foreground\">Automated insights and executive reporting</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"daily\">Daily</SelectItem>\n              <SelectItem value=\"weekly\">Weekly</SelectItem>\n              <SelectItem value=\"monthly\">Monthly</SelectItem>\n              <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" onClick={handleExportReport} data-testid=\"button-export\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button onClick={handleGenerateReport} disabled={isGenerating} data-testid=\"button-generate\">\n            {isGenerating ? (\n              <>\n                <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <FileBarChart className=\"h-4 w-4 mr-2\" />\n                Generate\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"daily\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily\">Daily Summary</TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly\">Weekly Insights</TabsTrigger>\n          <TabsTrigger value=\"executive\" data-testid=\"tab-executive\">Executive Report</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"daily\" className=\"space-y-6\">\n          {/* Daily Summary Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Daily Inspection Summary - {new Date(dailySummary.date).toLocaleDateString()}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm leading-relaxed\">\n                  <strong>{dailySummary.totalInspections} inspections</strong> completed today across multiple rigs. \n                  <strong className=\"text-red-600\"> {dailySummary.criticalIssues} critical issues</strong> found on {dailySummary.affectedRigs.join(\" and \")}, \n                  with the top issue being <strong>\"{dailySummary.topIssue}\"</strong>. \n                  Overall pass rate was <strong className={getComplianceColor(dailySummary.passRate)}>{dailySummary.passRate}%</strong>, \n                  with inspector efficiency at <strong>{dailySummary.inspectorEfficiency}%</strong>.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">{dailySummary.criticalIssues}</div>\n                  <p className=\"text-sm text-muted-foreground\">Critical Issues</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-orange-600\">{dailySummary.majorIssues}</div>\n                  <p className=\"text-sm text-muted-foreground\">Major Issues</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">{dailySummary.minorIssues}</div>\n                  <p className=\"text-sm text-muted-foreground\">Minor Issues</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className={`text-2xl font-bold ${getComplianceColor(dailySummary.passRate)}`}>\n                    {dailySummary.passRate}%\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Pass Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Daily Charts */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Issue Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <PieChart>\n                    <Pie\n                      data={issueDistribution}\n                      dataKey=\"count\"\n                      nameKey=\"severity\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      label={(entry) => `${entry.severity}: ${entry.count}`}\n                    >\n                      {issueDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Rig Performance Scores</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={rigPerformance}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"rig\" />\n                    <YAxis domain={[0, 100]} />\n                    <Tooltip formatter={(value) => [`${value}%`, 'Performance Score']} />\n                    <Bar dataKey=\"score\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"weekly\" className=\"space-y-6\">\n          {/* Weekly Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Weekly Analysis - {weeklySummary.week}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <p className=\"text-sm leading-relaxed\">\n                  This week saw <strong>{weeklySummary.totalInspections} total inspections</strong> with critical issues \n                  {weeklySummary.trendsAnalysis.criticalIncreased ? ' increasing' : ' decreasing'} by \n                  <strong className=\"text-red-600\"> {weeklySummary.trendsAnalysis.percentChange}%</strong> primarily due to \n                  <strong> {weeklySummary.trendsAnalysis.primaryCause}</strong>. \n                  Top performing inspector was <strong>{weeklySummary.topPerformer}</strong> with consistently high accuracy ratings.\n                </p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium\">Key Recommendations:</h4>\n                <div className=\"space-y-2\">\n                  {weeklySummary.recommendations.map((rec, index) => (\n                    <div key={index} className=\"flex items-start gap-2 text-sm\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <span>{rec}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Weekly Charts */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Inspection Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={inspectionTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip />\n                    <Bar yAxisId=\"left\" dataKey=\"inspections\" fill=\"#3b82f6\" opacity={0.3} />\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"compliance\" stroke=\"#22c55e\" strokeWidth={2} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Risk Category Assessment</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <RadarChart data={weeklySummary.riskCategories}>\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"category\" />\n                    <PolarRadiusAxis domain={[0, 100]} />\n                    <Radar\n                      dataKey=\"score\"\n                      stroke=\"#3b82f6\"\n                      fill=\"#3b82f6\"\n                      fillOpacity={0.3}\n                    />\n                    <Tooltip formatter={(value) => [`${value}%`, 'Score']} />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"executive\" className=\"space-y-6\">\n          {/* Executive Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                {executiveSummary.period}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* KPI Dashboard */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                {executiveSummary.kpis.map((kpi, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-sm font-medium\">{kpi.metric}</h4>\n                      {getTrendIcon(kpi.trend)}\n                    </div>\n                    <div className=\"flex items-end gap-2\">\n                      <div className=\"text-2xl font-bold\">\n                        {kpi.unit === \"M\" ? `$${kpi.value}${kpi.unit}` : `${kpi.value}${kpi.unit || '%'}`}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        / {kpi.unit === \"M\" ? `$${kpi.target}${kpi.unit}` : `${kpi.target}${kpi.unit || '%'}`}\n                      </div>\n                    </div>\n                    <Progress \n                      value={kpi.unit === \"M\" ? (kpi.value / kpi.target) * 100 : Math.min(100, (kpi.value / kpi.target) * 100)} \n                      className=\"mt-2\" \n                    />\n                  </div>\n                ))}\n              </div>\n\n              <Separator />\n\n              {/* Executive Narrative */}\n              <div className=\"bg-muted/50 p-6 rounded-lg\">\n                <h4 className=\"font-medium mb-3\">Executive Summary</h4>\n                <p className=\"text-sm leading-relaxed text-muted-foreground\">\n                  {executiveSummary.narrative}\n                </p>\n              </div>\n\n              <Separator />\n\n              {/* Board Recommendations */}\n              <div>\n                <h4 className=\"font-medium mb-3 flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  Board Recommendations\n                </h4>\n                <div className=\"space-y-3\">\n                  {executiveSummary.boardRecommendations.map((rec, index) => (\n                    <div key={index} className=\"flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                      <Badge variant=\"secondary\" className=\"mt-0.5\">\n                        {index + 1}\n                      </Badge>\n                      <p className=\"text-sm\">{rec}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Executive Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Quarterly Compliance Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={complianceBreakdown}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"area\" />\n                    <YAxis domain={[0, 100]} />\n                    <Tooltip formatter={(value) => [`${value}%`, 'Compliance Score']} />\n                    <Bar dataKey=\"score\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>6-Month Inspection Volume</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <AreaChart data={inspectionTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"inspections\"\n                      stroke=\"#3b82f6\"\n                      fill=\"#3b82f6\"\n                      fillOpacity={0.3}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Action Items */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                Priority Action Items\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3 p-3 border border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950 rounded-lg\">\n                  <Badge variant=\"destructive\">High</Badge>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\">Schedule emergency maintenance for critical pressure systems</p>\n                    <p className=\"text-xs text-muted-foreground\">Due: Within 48 hours</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 border border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950 rounded-lg\">\n                  <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">Medium</Badge>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\">Review and update inspection protocols for wire rope components</p>\n                    <p className=\"text-xs text-muted-foreground\">Due: End of month</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-3 border border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950 rounded-lg\">\n                  <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">Low</Badge>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\">Conduct quarterly safety training for inspection staff</p>\n                    <p className=\"text-xs text-muted-foreground\">Due: Next quarter</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21038},"client/src/pages/AnomalyDetectionPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertTriangle, TrendingDown, TrendingUp, Eye, Users, Calendar, Filter, RefreshCw } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, ScatterChart, Scatter, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from \"recharts\";\n\nconst rigAnomalies = [\n  { rig: \"Rig-001\", normalRange: [15, 25], current: 42, severity: \"high\", trend: \"increasing\" },\n  { rig: \"Rig-002\", normalRange: [10, 18], current: 12, severity: \"normal\", trend: \"stable\" },\n  { rig: \"Rig-003\", normalRange: [8, 16], current: 31, severity: \"high\", trend: \"increasing\" },\n  { rig: \"Rig-004\", normalRange: [12, 22], current: 18, severity: \"normal\", trend: \"decreasing\" },\n  { rig: \"Rig-005\", normalRange: [20, 30], current: 6, severity: \"low\", trend: \"decreasing\" }\n];\n\nconst inspectorConsistency = [\n  { \n    inspector: \"John Smith\", \n    passRate: 78, \n    avgInspectionTime: 45, \n    consistencyScore: 92,\n    flaggedItems: 2,\n    status: \"normal\"\n  },\n  { \n    inspector: \"Sarah Jones\", \n    passRate: 95, \n    avgInspectionTime: 32, \n    consistencyScore: 88,\n    flaggedItems: 1,\n    status: \"attention\" // Too high pass rate\n  },\n  { \n    inspector: \"Mike Wilson\", \n    passRate: 52, \n    avgInspectionTime: 67, \n    consistencyScore: 76,\n    flaggedItems: 5,\n    status: \"concerning\" // Too low pass rate, slow\n  },\n  { \n    inspector: \"Lisa Chen\", \n    passRate: 82, \n    avgInspectionTime: 38, \n    consistencyScore: 94,\n    flaggedItems: 0,\n    status: \"normal\"\n  }\n];\n\nconst timeSeriesAnomalies = [\n  { date: \"2024-01-01\", failures: 8, expected: 12 },\n  { date: \"2024-01-02\", failures: 15, expected: 13 },\n  { date: \"2024-01-03\", failures: 22, expected: 11 },\n  { date: \"2024-01-04\", failures: 35, expected: 14 }, // Anomaly\n  { date: \"2024-01-05\", failures: 41, expected: 12 }, // Anomaly\n  { date: \"2024-01-06\", failures: 18, expected: 15 },\n  { date: \"2024-01-07\", failures: 12, expected: 16 }\n];\n\nconst categoryAnomalies = [\n  { category: \"Safety Systems\", baseline: 85, current: 92, variance: 8.2 },\n  { category: \"Mechanical\", baseline: 78, current: 65, variance: -16.7 },\n  { category: \"Electrical\", baseline: 90, current: 88, variance: -2.2 },\n  { category: \"Structural\", baseline: 82, current: 95, variance: 15.9 },\n  { category: \"Lifting Equipment\", baseline: 75, current: 58, variance: -22.7 }\n];\n\nconst getSeverityColor = (severity: string) => {\n  switch (severity) {\n    case \"high\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n    case \"normal\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n    case \"low\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n    default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"concerning\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n    case \"attention\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n    case \"normal\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n    default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n  }\n};\n\nexport default function AnomalyDetectionPage() {\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"7d\");\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate data refresh\n    setTimeout(() => setIsRefreshing(false), 1500);\n  };\n\n  const criticalAnomalies = rigAnomalies.filter(rig => rig.severity === \"high\").length;\n  const concerningInspectors = inspectorConsistency.filter(i => i.status === \"concerning\").length;\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-anomaly-detection\">Anomaly Detection</h1>\n          <p className=\"text-muted-foreground\">AI-powered pattern analysis and consistency monitoring</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n            <SelectTrigger className=\"w-24\" data-testid=\"select-timeframe\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"1d\">1D</SelectItem>\n              <SelectItem value=\"7d\">7D</SelectItem>\n              <SelectItem value=\"30d\">30D</SelectItem>\n              <SelectItem value=\"90d\">90D</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            data-testid=\"button-refresh\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Alert Summary */}\n      {(criticalAnomalies > 0 || concerningInspectors > 0) && (\n        <Alert className=\"border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Anomalies Detected:</strong> {criticalAnomalies} rig patterns and {concerningInspectors} inspector consistency issues require attention.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              Critical Anomalies\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{criticalAnomalies}</div>\n            <p className=\"text-sm text-muted-foreground\">Require immediate attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Inspector Issues\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{concerningInspectors}</div>\n            <p className=\"text-sm text-muted-foreground\">Consistency problems</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              Detection Rate\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">94.2%</div>\n            <p className=\"text-sm text-muted-foreground\">Anomaly capture rate</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Avg Response Time\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">2.4h</div>\n            <p className=\"text-sm text-muted-foreground\">To anomaly resolution</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"patterns\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"patterns\" data-testid=\"tab-patterns\">Inspection Patterns</TabsTrigger>\n          <TabsTrigger value=\"inspectors\" data-testid=\"tab-inspectors\">Inspector Consistency</TabsTrigger>\n          <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">Trend Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"patterns\" className=\"space-y-6\">\n          {/* Rig Anomalies */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Eye className=\"h-5 w-5\" />\n                Rig Performance Anomalies\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {rigAnomalies.map((rig) => (\n                  <div key={rig.rig} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h4 className=\"font-medium\">{rig.rig}</h4>\n                        <Badge className={getSeverityColor(rig.severity)}>\n                          {rig.severity}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"gap-1\">\n                          {rig.trend === \"increasing\" ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                          {rig.trend}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Normal range: {rig.normalRange[0]}-{rig.normalRange[1]} failures/week\n                      </p>\n                      <p className=\"text-sm\">\n                        <strong>Current:</strong> {rig.current} failures\n                        {rig.severity !== \"normal\" && (\n                          <span className=\"ml-2 text-red-600\">\n                            ({rig.current > rig.normalRange[1] ? '+' : ''}{((rig.current - (rig.normalRange[0] + rig.normalRange[1])/2) / ((rig.normalRange[0] + rig.normalRange[1])/2) * 100).toFixed(1)}%)\n                          </span>\n                        )}\n                      </p>\n                    </div>\n                    <Progress \n                      value={Math.min(100, (rig.current / 50) * 100)} \n                      className=\"w-24\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Category Performance Variance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={categoryAnomalies}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"category\" \n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={80}\n                  />\n                  <YAxis />\n                  <Tooltip \n                    formatter={(value, name) => [\n                      `${value}%`, \n                      name === 'baseline' ? 'Baseline' : name === 'current' ? 'Current' : 'Variance'\n                    ]} \n                  />\n                  <Bar dataKey=\"baseline\" fill=\"#94a3b8\" name=\"baseline\" />\n                  <Bar dataKey=\"current\" fill=\"#3b82f6\" name=\"current\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"inspectors\" className=\"space-y-6\">\n          {/* Inspector Consistency */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Inspector Performance Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {inspectorConsistency.map((inspector) => (\n                  <div key={inspector.inspector} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-medium\">{inspector.inspector}</h4>\n                          <Badge className={getStatusColor(inspector.status)}>\n                            {inspector.status}\n                          </Badge>\n                        </div>\n                        {inspector.flaggedItems > 0 && (\n                          <p className=\"text-sm text-orange-600\">\n                            {inspector.flaggedItems} flagged pattern{inspector.flaggedItems !== 1 ? 's' : ''}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"text-right text-sm text-muted-foreground\">\n                        Consistency Score: <span className=\"font-medium\">{inspector.consistencyScore}%</span>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <div className=\"flex justify-between\">\n                          <span>Pass Rate:</span>\n                          <span className={inspector.passRate > 90 || inspector.passRate < 60 ? 'text-orange-600 font-medium' : ''}>\n                            {inspector.passRate}%\n                          </span>\n                        </div>\n                        <Progress value={inspector.passRate} className=\"h-2 mt-1\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between\">\n                          <span>Avg Time:</span>\n                          <span className={inspector.avgInspectionTime > 60 ? 'text-orange-600 font-medium' : ''}>\n                            {inspector.avgInspectionTime}m\n                          </span>\n                        </div>\n                        <Progress value={Math.min(100, (inspector.avgInspectionTime / 90) * 100)} className=\"h-2 mt-1\" />\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between\">\n                          <span>Consistency:</span>\n                          <span>{inspector.consistencyScore}%</span>\n                        </div>\n                        <Progress value={inspector.consistencyScore} className=\"h-2 mt-1\" />\n                      </div>\n                    </div>\n\n                    {inspector.status === \"concerning\" && (\n                      <Alert className=\"mt-3 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950\">\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <AlertDescription className=\"text-sm\">\n                          Unusual patterns detected: {inspector.passRate < 60 ? 'Low pass rate, ' : ''}\n                          {inspector.avgInspectionTime > 60 ? 'Slow inspection times, ' : ''}\n                          requires supervisor review.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          {/* Time Series Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Failure Pattern Over Time</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={timeSeriesAnomalies}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                  />\n                  <YAxis />\n                  <Tooltip \n                    labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                    formatter={(value, name) => [value, name === 'failures' ? 'Actual Failures' : 'Expected Range']}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"expected\" \n                    stroke=\"#94a3b8\" \n                    strokeDasharray=\"5 5\"\n                    name=\"expected\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"failures\" \n                    stroke=\"#ef4444\" \n                    strokeWidth={2}\n                    name=\"failures\"\n                    dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 4 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* Inspector Scatter Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Inspector Performance Correlation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ScatterChart>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"passRate\" \n                    domain={[40, 100]}\n                    name=\"Pass Rate (%)\"\n                  />\n                  <YAxis \n                    dataKey=\"avgInspectionTime\" \n                    domain={[20, 80]}\n                    name=\"Avg Time (min)\"\n                  />\n                  <Tooltip \n                    formatter={(value, name) => [\n                      name === 'passRate' ? `${value}%` : `${value}m`,\n                      name === 'passRate' ? 'Pass Rate' : 'Avg Time'\n                    ]}\n                  />\n                  <Scatter \n                    data={inspectorConsistency} \n                    fill=\"#3b82f6\"\n                    name=\"Inspectors\"\n                  />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18659},"client/src/pages/DashboardPage.tsx":{"content":"import { Dashboard } from \"@/components/Dashboard\";\n\nexport default function DashboardPage() {\n  return <Dashboard />;\n}","size_bytes":120},"client/src/pages/InspectionDetailPage.tsx":{"content":"import { ChecklistView } from \"@/components/ChecklistView\";\nimport { PhotoGallery } from \"@/components/PhotoGallery\";\nimport { CARPanel } from \"@/components/CARPanel\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBadge } from \"@/components/StatusBadge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Save, Share, Download, Edit } from \"lucide-react\";\n\nexport default function InspectionDetailPage() {\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <h1 className=\"text-2xl font-bold\">INS-001</h1>\n                <StatusBadge status=\"in-progress\" />\n                <StatusBadge severity=\"medium\" variant=\"severity\" />\n              </div>\n              <h2 className=\"text-xl text-muted-foreground mb-4\">Deep Water Horizon II - Weekly Safety Inspection</h2>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <p className=\"font-medium\">Created</p>\n                  <p className=\"text-muted-foreground\">Jan 15, 2024</p>\n                </div>\n                <div>\n                  <p className=\"font-medium\">Due Date</p>\n                  <p className=\"text-muted-foreground\">Jan 22, 2024</p>\n                </div>\n                <div>\n                  <p className=\"font-medium\">Completion</p>\n                  <p className=\"text-muted-foreground\">65%</p>\n                </div>\n                <div>\n                  <p className=\"font-medium\">Issues Found</p>\n                  <p className=\"text-muted-foreground\">3 items</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share\">\n                <Share className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button size=\"sm\" data-testid=\"button-save\">\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-medium mb-2\">Assigned Inspectors</h3>\n              <div className=\"flex gap-2\">\n                <div className=\"flex items-center gap-2 bg-muted p-2 rounded-lg\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback>JS</AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm\">John Smith</span>\n                  <Badge variant=\"secondary\">Lead</Badge>\n                </div>\n                <div className=\"flex items-center gap-2 bg-muted p-2 rounded-lg\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarFallback>SJ</AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm\">Sarah Jones</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"checklist\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"checklist\" data-testid=\"tab-checklist\">Checklist</TabsTrigger>\n          <TabsTrigger value=\"photos\" data-testid=\"tab-photos\">Photos</TabsTrigger>\n          <TabsTrigger value=\"cars\" data-testid=\"tab-cars\">CARs</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"checklist\" className=\"space-y-4\">\n          <ChecklistView />\n        </TabsContent>\n        \n        <TabsContent value=\"photos\" className=\"space-y-4\">\n          <PhotoGallery />\n        </TabsContent>\n        \n        <TabsContent value=\"cars\" className=\"space-y-4\">\n          <CARPanel />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":4340},"client/src/pages/InspectionsPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { InspectionTable } from \"@/components/InspectionTable\";\nimport { Search, Filter, Plus } from \"lucide-react\";\n\nexport default function InspectionsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Inspections</h1>\n          <p className=\"text-muted-foreground\">Manage and review all inspection activities</p>\n        </div>\n        <Button data-testid=\"button-new-inspection\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Inspection\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Search & Filter\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search inspections...\"\n                className=\"pl-10\"\n                data-testid=\"input-search-inspections\"\n              />\n            </div>\n            <Select>\n              <SelectTrigger data-testid=\"select-rig-filter\">\n                <SelectValue placeholder=\"Select rig\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Rigs</SelectItem>\n                <SelectItem value=\"deepwater-horizon-ii\">Deep Water Horizon II</SelectItem>\n                <SelectItem value=\"ocean-explorer\">Ocean Explorer</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select>\n              <SelectTrigger data-testid=\"select-severity-filter\">\n                <SelectValue placeholder=\"Severity\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Severities</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Inspections</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <InspectionTable />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3361},"client/src/pages/NewInspectionPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { X, Plus, Calendar, MapPin, Users } from \"lucide-react\";\n\nconst availableInspectors = [\n  { id: \"1\", name: \"John Smith\", specialties: [\"Safety\", \"Structural\"] },\n  { id: \"2\", name: \"Sarah Jones\", specialties: [\"Environmental\", \"Operations\"] },\n  { id: \"3\", name: \"Mike Wilson\", specialties: [\"Equipment\", \"Maintenance\"] },\n  { id: \"4\", name: \"Lisa Chen\", specialties: [\"Safety\", \"Quality\"] },\n];\n\nconst availableRigs = [\n  { id: \"1\", name: \"Deep Water Horizon II\", location: \"Gulf of Mexico\" },\n  { id: \"2\", name: \"Ocean Explorer\", location: \"North Sea\" },\n  { id: \"3\", name: \"North Sea Pioneer\", location: \"Norwegian Sector\" },\n];\n\nexport default function NewInspectionPage() {\n  const [selectedInspectors, setSelectedInspectors] = useState<string[]>([]);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    rigId: \"\",\n    scheduledDate: \"\",\n    description: \"\",\n    priority: \"medium\",\n    estimatedDuration: \"\",\n  });\n\n  const addInspector = (inspectorId: string) => {\n    if (!selectedInspectors.includes(inspectorId)) {\n      setSelectedInspectors([...selectedInspectors, inspectorId]);\n    }\n  };\n\n  const removeInspector = (inspectorId: string) => {\n    setSelectedInspectors(selectedInspectors.filter(id => id !== inspectorId));\n  };\n\n  const handleSubmit = () => {\n    console.log(\"Creating inspection:\", {\n      ...formData,\n      inspectors: selectedInspectors,\n    });\n  };\n\n  const selectedRig = availableRigs.find(rig => rig.id === formData.rigId);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">New Inspection</h1>\n        <p className=\"text-muted-foreground\">Create and schedule a new inspection for your rigs</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Inspection Details\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Inspection Title</label>\n              <Input\n                placeholder=\"e.g., Weekly Safety Inspection\"\n                value={formData.title}\n                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                data-testid=\"input-inspection-title\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Priority</label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, priority: value }))}\n              >\n                <SelectTrigger data-testid=\"select-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Description</label>\n            <Textarea\n              placeholder=\"Detailed description of the inspection scope and objectives...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              rows={3}\n              data-testid=\"textarea-description\"\n            />\n          </div>\n\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Scheduled Date</label>\n              <Input\n                type=\"datetime-local\"\n                value={formData.scheduledDate}\n                onChange={(e) => setFormData(prev => ({ ...prev, scheduledDate: e.target.value }))}\n                data-testid=\"input-scheduled-date\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Estimated Duration (hours)</label>\n              <Input\n                type=\"number\"\n                placeholder=\"8\"\n                value={formData.estimatedDuration}\n                onChange={(e) => setFormData(prev => ({ ...prev, estimatedDuration: e.target.value }))}\n                data-testid=\"input-duration\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5\" />\n            Select Rig\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select\n            value={formData.rigId}\n            onValueChange={(value) => setFormData(prev => ({ ...prev, rigId: value }))}\n          >\n            <SelectTrigger data-testid=\"select-rig\">\n              <SelectValue placeholder=\"Choose a rig for inspection\" />\n            </SelectTrigger>\n            <SelectContent>\n              {availableRigs.map((rig) => (\n                <SelectItem key={rig.id} value={rig.id}>\n                  {rig.name} - {rig.location}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          {selectedRig && (\n            <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n              <h3 className=\"font-medium\">{selectedRig.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{selectedRig.location}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Assign Inspectors\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Available Inspectors</label>\n            <div className=\"grid gap-2 md:grid-cols-2\">\n              {availableInspectors.map((inspector) => (\n                <div\n                  key={inspector.id}\n                  className={`p-3 border rounded-lg cursor-pointer hover-elevate ${\n                    selectedInspectors.includes(inspector.id) ? \"border-primary bg-primary/5\" : \"\"\n                  }`}\n                  onClick={() => \n                    selectedInspectors.includes(inspector.id) \n                      ? removeInspector(inspector.id)\n                      : addInspector(inspector.id)\n                  }\n                  data-testid={`inspector-card-${inspector.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback>\n                          {inspector.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium text-sm\">{inspector.name}</p>\n                        <div className=\"flex gap-1\">\n                          {inspector.specialties.map((specialty) => (\n                            <Badge key={specialty} variant=\"secondary\" className=\"text-xs\">\n                              {specialty}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    {selectedInspectors.includes(inspector.id) && (\n                      <div className=\"text-primary\">✓</div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {selectedInspectors.length > 0 && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Selected Inspectors ({selectedInspectors.length})</label>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedInspectors.map((inspectorId) => {\n                  const inspector = availableInspectors.find(i => i.id === inspectorId);\n                  return inspector ? (\n                    <div key={inspectorId} className=\"flex items-center gap-2 bg-primary/10 text-primary px-3 py-1 rounded-full text-sm\">\n                      {inspector.name}\n                      <button\n                        onClick={() => removeInspector(inspectorId)}\n                        className=\"hover:bg-primary/20 rounded-full p-1\"\n                        data-testid={`remove-inspector-${inspectorId}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </div>\n                  ) : null;\n                })}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-4\">\n        <Button\n          onClick={handleSubmit}\n          className=\"flex-1\"\n          disabled={!formData.title || !formData.rigId || selectedInspectors.length === 0}\n          data-testid=\"button-create-inspection\"\n        >\n          Create Inspection\n        </Button>\n        <Button variant=\"outline\" data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":10085},"client/src/pages/PredictiveAnalyticsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Target, AlertCircle, Calendar, BarChart3, Map, Zap, RefreshCw } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area, BarChart, Bar, ScatterChart, Scatter, PieChart, Pie, Cell } from \"recharts\";\n\nconst trendForecast = [\n  { month: \"Jan\", actual: 245, predicted: null },\n  { month: \"Feb\", actual: 267, predicted: null },\n  { month: \"Mar\", actual: 234, predicted: null },\n  { month: \"Apr\", actual: 289, predicted: null },\n  { month: \"May\", actual: 312, predicted: null },\n  { month: \"Jun\", actual: 298, predicted: null },\n  { month: \"Jul\", actual: null, predicted: 324 },\n  { month: \"Aug\", actual: null, predicted: 341 },\n  { month: \"Sep\", actual: null, predicted: 356 },\n  { month: \"Oct\", actual: null, predicted: 378 },\n  { month: \"Nov\", actual: null, predicted: 392 },\n  { month: \"Dec\", actual: null, predicted: 385 }\n];\n\nconst riskHeatmapData = [\n  { rig: \"Rig-001\", riskScore: 89, category: \"High\", failureProbability: 78, nextFailureWeeks: 2 },\n  { rig: \"Rig-002\", riskScore: 34, category: \"Low\", failureProbability: 23, nextFailureWeeks: 12 },\n  { rig: \"Rig-003\", riskScore: 67, category: \"Medium\", failureProbability: 52, nextFailureWeeks: 6 },\n  { rig: \"Rig-004\", riskScore: 92, category: \"High\", failureProbability: 81, nextFailureWeeks: 1 },\n  { rig: \"Rig-005\", riskScore: 45, category: \"Low\", failureProbability: 31, nextFailureWeeks: 8 },\n  { rig: \"Rig-006\", riskScore: 78, category: \"Medium\", failureProbability: 64, nextFailureWeeks: 4 }\n];\n\nconst recurrenceAnalysis = [\n  {\n    issueType: \"Pressure relief valve failure\",\n    occurrences: 12,\n    avgFrequency: 45, // days\n    affectedRigs: [\"Rig-001\", \"Rig-003\", \"Rig-004\"],\n    severity: \"Critical\",\n    predictedNext: \"2024-02-15\",\n    confidence: 87\n  },\n  {\n    issueType: \"Wire rope wear\",\n    occurrences: 28,\n    avgFrequency: 28,\n    affectedRigs: [\"Rig-002\", \"Rig-005\", \"Rig-006\"],\n    severity: \"Major\", \n    predictedNext: \"2024-01-28\",\n    confidence: 94\n  },\n  {\n    issueType: \"Safety latch malfunction\",\n    occurrences: 8,\n    avgFrequency: 67,\n    affectedRigs: [\"Rig-001\", \"Rig-002\"],\n    severity: \"Major\",\n    predictedNext: \"2024-03-05\",\n    confidence: 76\n  },\n  {\n    issueType: \"Hydraulic leak\",\n    occurrences: 15,\n    avgFrequency: 35,\n    affectedRigs: [\"Rig-003\", \"Rig-004\", \"Rig-005\"],\n    severity: \"Minor\",\n    predictedNext: \"2024-02-08\",\n    confidence: 82\n  }\n];\n\nconst componentLifecycle = [\n  { component: \"BOP Stack\", currentAge: 24, predictedLife: 36, utilizationRate: 87 },\n  { component: \"Draw Works\", currentAge: 18, predictedLife: 48, utilizationRate: 72 },\n  { component: \"Mud Pumps\", currentAge: 32, predictedLife: 42, utilizationRate: 95 },\n  { component: \"Top Drive\", currentAge: 15, predictedLife: 60, utilizationRate: 68 },\n  { component: \"Rotary Table\", currentAge: 41, predictedLife: 60, utilizationRate: 84 }\n];\n\nconst riskFactors = [\n  { factor: \"Equipment Age\", weight: 0.25, currentValue: 78 },\n  { factor: \"Utilization Rate\", weight: 0.20, currentValue: 85 },\n  { factor: \"Environment\", weight: 0.15, currentValue: 45 },\n  { factor: \"Maintenance History\", weight: 0.20, currentValue: 72 },\n  { factor: \"Operator Experience\", weight: 0.10, currentValue: 88 },\n  { factor: \"External Factors\", weight: 0.10, currentValue: 63 }\n];\n\nconst getRiskColor = (category: string) => {\n  switch (category) {\n    case \"High\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n    case \"Medium\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n    case \"Low\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n    default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n  }\n};\n\nconst getSeverityColor = (severity: string) => {\n  switch (severity) {\n    case \"Critical\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n    case \"Major\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n    case \"Minor\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n    default: return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n  }\n};\n\nexport default function PredictiveAnalyticsPage() {\n  const [selectedTimeframe, setSelectedTimeframe] = useState(\"6m\");\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const handleGenerateForecast = async () => {\n    setIsGenerating(true);\n    setTimeout(() => setIsGenerating(false), 2000);\n  };\n\n  const highRiskRigs = riskHeatmapData.filter(r => r.category === \"High\").length;\n  const criticalIssues = recurrenceAnalysis.filter(r => r.severity === \"Critical\").length;\n  const avgConfidence = recurrenceAnalysis.reduce((sum, item) => sum + item.confidence, 0) / recurrenceAnalysis.length;\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-predictive-analytics\">Predictive Analytics</h1>\n          <p className=\"text-muted-foreground\">AI-powered trend forecasting and risk analysis</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>\n            <SelectTrigger className=\"w-24\" data-testid=\"select-timeframe\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"3m\">3M</SelectItem>\n              <SelectItem value=\"6m\">6M</SelectItem>\n              <SelectItem value=\"12m\">12M</SelectItem>\n              <SelectItem value=\"24m\">24M</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button \n            onClick={handleGenerateForecast}\n            disabled={isGenerating}\n            data-testid=\"button-generate-forecast\"\n          >\n            {isGenerating ? (\n              <>\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <Zap className=\"h-4 w-4 mr-2\" />\n                Generate Forecast\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4\" />\n              High Risk Rigs\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{highRiskRigs}</div>\n            <p className=\"text-sm text-muted-foreground\">Require immediate attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              Critical Patterns\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{criticalIssues}</div>\n            <p className=\"text-sm text-muted-foreground\">Recurring critical issues</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Prediction Accuracy\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{avgConfidence.toFixed(1)}%</div>\n            <p className=\"text-sm text-muted-foreground\">Average confidence</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Next Failure Risk\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {Math.min(...riskHeatmapData.map(r => r.nextFailureWeeks))}w\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Earliest predicted failure</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"forecasts\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"forecasts\" data-testid=\"tab-forecasts\">Trend Forecasts</TabsTrigger>\n          <TabsTrigger value=\"heatmaps\" data-testid=\"tab-heatmaps\">Risk Heatmaps</TabsTrigger>\n          <TabsTrigger value=\"recurrence\" data-testid=\"tab-recurrence\">Failure Recurrence</TabsTrigger>\n          <TabsTrigger value=\"lifecycle\" data-testid=\"tab-lifecycle\">Component Lifecycle</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"forecasts\" className=\"space-y-6\">\n          {/* Trend Forecast Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Failure Trend Forecast (Next 6 Months)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={trendForecast}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip formatter={(value, name) => [value, name === 'actual' ? 'Historical' : 'Predicted']} />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"actual\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 4 }}\n                    connectNulls={false}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"predicted\" \n                    stroke=\"#ef4444\" \n                    strokeWidth={2}\n                    strokeDasharray=\"5 5\"\n                    dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 4 }}\n                    connectNulls={false}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n              <Alert className=\"mt-4 border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-950\">\n                <TrendingUp className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Forecast Insight:</strong> Failure rates are predicted to increase by 27% over the next 6 months, \n                  with peak risk expected in October. Consider scheduling preventive maintenance.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          {/* Risk Factors Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Risk Factor Contribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={riskFactors}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"factor\" \n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={80}\n                  />\n                  <YAxis domain={[0, 100]} />\n                  <Tooltip formatter={(value, name) => [`${value}%`, name === 'currentValue' ? 'Impact Score' : 'Weight']} />\n                  <Bar dataKey=\"currentValue\" fill=\"#3b82f6\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"heatmaps\" className=\"space-y-6\">\n          {/* Risk Heatmap */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Map className=\"h-5 w-5\" />\n                Rig Risk Assessment Heatmap\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {riskHeatmapData.map((rig) => (\n                  <div key={rig.rig} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-medium\">{rig.rig}</h4>\n                        <Badge className={getRiskColor(rig.category)}>\n                          {rig.category} Risk\n                        </Badge>\n                        <Badge variant=\"outline\">\n                          {rig.failureProbability}% failure probability\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Risk Score:</span>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Progress value={rig.riskScore} className=\"flex-1\" />\n                            <span className=\"font-medium\">{rig.riskScore}/100</span>\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Failure Probability:</span>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Progress value={rig.failureProbability} className=\"flex-1\" />\n                            <span className=\"font-medium\">{rig.failureProbability}%</span>\n                          </div>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Next Failure:</span>\n                          <p className=\"font-medium mt-1\">\n                            {rig.nextFailureWeeks} week{rig.nextFailureWeeks !== 1 ? 's' : ''}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Risk Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Risk Level Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                  <Pie\n                    data={[\n                      { name: \"High Risk\", value: riskHeatmapData.filter(r => r.category === \"High\").length, fill: \"#ef4444\" },\n                      { name: \"Medium Risk\", value: riskHeatmapData.filter(r => r.category === \"Medium\").length, fill: \"#f97316\" },\n                      { name: \"Low Risk\", value: riskHeatmapData.filter(r => r.category === \"Low\").length, fill: \"#22c55e\" }\n                    ]}\n                    dataKey=\"value\"\n                    nameKey=\"name\"\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    label={(entry) => `${entry.name}: ${entry.value}`}\n                  />\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"recurrence\" className=\"space-y-6\">\n          {/* Recurrence Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Failure Recurrence Patterns\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recurrenceAnalysis.map((issue, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h4 className=\"font-medium\">{issue.issueType}</h4>\n                          <Badge className={getSeverityColor(issue.severity)}>\n                            {issue.severity}\n                          </Badge>\n                          <Badge variant=\"outline\">\n                            {issue.confidence}% confidence\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Affected rigs: {issue.affectedRigs.join(\", \")}\n                        </p>\n                      </div>\n                      <div className=\"text-right text-sm\">\n                        <p className=\"font-medium\">Next predicted: {new Date(issue.predictedNext).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Total Occurrences:</span>\n                        <p className=\"font-medium\">{issue.occurrences}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Avg Frequency:</span>\n                        <p className=\"font-medium\">Every {issue.avgFrequency} days</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Prediction Confidence:</span>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Progress value={issue.confidence} className=\"flex-1\" />\n                          <span className=\"font-medium\">{issue.confidence}%</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {issue.severity === \"Critical\" && (\n                      <Alert className=\"mt-3 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        <AlertDescription className=\"text-sm\">\n                          <strong>Critical Pattern Alert:</strong> This failure pattern requires immediate attention. \n                          Consider implementing proactive maintenance measures.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"lifecycle\" className=\"space-y-6\">\n          {/* Component Lifecycle */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Component Lifecycle Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {componentLifecycle.map((component, index) => (\n                  <div key={index} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium\">{component.component}</h4>\n                      <Badge variant=\"outline\">\n                        {((component.currentAge / component.predictedLife) * 100).toFixed(0)}% lifecycle\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Current Age:</span>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Progress \n                            value={(component.currentAge / component.predictedLife) * 100} \n                            className=\"flex-1\" \n                          />\n                          <span className=\"font-medium\">{component.currentAge}m</span>\n                        </div>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Predicted Lifespan:</span>\n                        <p className=\"font-medium mt-1\">{component.predictedLife} months</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Utilization Rate:</span>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Progress value={component.utilizationRate} className=\"flex-1\" />\n                          <span className=\"font-medium\">{component.utilizationRate}%</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3 text-sm\">\n                      <span className=\"text-muted-foreground\">Remaining Life:</span>\n                      <span className=\"ml-2 font-medium\">\n                        {component.predictedLife - component.currentAge} months\n                        {component.currentAge / component.predictedLife > 0.8 && (\n                          <span className=\"ml-2 text-orange-600\">(Replacement needed soon)</span>\n                        )}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Lifecycle Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Component Age vs Predicted Life</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ScatterChart>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"currentAge\" \n                    name=\"Current Age (months)\"\n                    domain={[0, 50]}\n                  />\n                  <YAxis \n                    dataKey=\"predictedLife\" \n                    name=\"Predicted Life (months)\"\n                    domain={[30, 70]}\n                  />\n                  <Tooltip \n                    formatter={(value, name) => [\n                      `${value} months`,\n                      name === 'currentAge' ? 'Current Age' : 'Predicted Life'\n                    ]}\n                  />\n                  <Scatter \n                    data={componentLifecycle} \n                    fill=\"#3b82f6\"\n                    name=\"Components\"\n                  />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":23533},"client/src/pages/SettingsPage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Building, Settings, Users, Image, Globe } from \"lucide-react\";\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your company settings and preferences</p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"company\" data-testid=\"tab-company\">Company</TabsTrigger>\n          <TabsTrigger value=\"rigs\" data-testid=\"tab-rigs\">Rigs</TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">Users</TabsTrigger>\n          <TabsTrigger value=\"photos\" data-testid=\"tab-photos\">Photos</TabsTrigger>\n          <TabsTrigger value=\"system\" data-testid=\"tab-system\">System</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"h-5 w-5\" />\n                Company Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Company Name</label>\n                  <Input defaultValue=\"Drops Trac Industries\" data-testid=\"input-company-name\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Industry</label>\n                  <Input defaultValue=\"Oil & Gas\" data-testid=\"input-industry\" />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Address</label>\n                <Textarea \n                  defaultValue=\"123 Offshore Drive, Houston, TX 77001\"\n                  rows={3}\n                  data-testid=\"textarea-address\"\n                />\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Contact Email</label>\n                  <Input defaultValue=\"admin@dropstrac.com\" data-testid=\"input-contact-email\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Phone</label>\n                  <Input defaultValue=\"+1 (555) 123-4567\" data-testid=\"input-phone\" />\n                </div>\n              </div>\n              \n              <Button data-testid=\"button-save-company\">Save Changes</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"rigs\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Manage Rigs</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <p className=\"text-muted-foreground\">Configure your offshore rigs and assets</p>\n                <Button data-testid=\"button-add-rig\">Add New Rig</Button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {[\"Deep Water Horizon II\", \"Ocean Explorer\", \"North Sea Pioneer\"].map((rigName, idx) => (\n                  <div key={idx} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h3 className=\"font-medium\">{rigName}</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {idx === 0 ? \"Gulf of Mexico\" : idx === 1 ? \"North Sea\" : \"Norwegian Sector\"}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge variant={idx === 0 ? \"default\" : \"secondary\"}>\n                        {idx === 0 ? \"Active\" : \"Standby\"}\n                      </Badge>\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-rig-${idx}`}>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                User Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <p className=\"text-muted-foreground\">Manage inspectors and administrators</p>\n                <Button data-testid=\"button-add-user\">Add New User</Button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {[\n                  { name: \"John Smith\", role: \"Lead Inspector\", email: \"j.smith@dropstrac.com\" },\n                  { name: \"Sarah Jones\", role: \"Inspector\", email: \"s.jones@dropstrac.com\" },\n                  { name: \"Mike Wilson\", role: \"Inspector\", email: \"m.wilson@dropstrac.com\" },\n                  { name: \"Admin User\", role: \"Administrator\", email: \"admin@dropstrac.com\" },\n                ].map((user, idx) => (\n                  <div key={idx} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h3 className=\"font-medium\">{user.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={user.role === \"Administrator\" ? \"default\" : \"secondary\"}>\n                        {user.role}\n                      </Badge>\n                      <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-user-${idx}`}>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"photos\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Image className=\"h-5 w-5\" />\n                Photo Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">File Size Limit</h3>\n                    <p className=\"text-sm text-muted-foreground\">Maximum size for uploaded photos</p>\n                  </div>\n                  <Select defaultValue=\"1mb\">\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-file-size-limit\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"500kb\">500 KB</SelectItem>\n                      <SelectItem value=\"1mb\">1 MB</SelectItem>\n                      <SelectItem value=\"2mb\">2 MB</SelectItem>\n                      <SelectItem value=\"5mb\">5 MB</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Quality Validation</h3>\n                    <p className=\"text-sm text-muted-foreground\">Automatically check photo quality</p>\n                  </div>\n                  <Switch defaultChecked data-testid=\"switch-quality-validation\" />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Auto-compression</h3>\n                    <p className=\"text-sm text-muted-foreground\">Compress large photos automatically</p>\n                  </div>\n                  <Switch defaultChecked data-testid=\"switch-auto-compression\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"system\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                System Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Time Zone</label>\n                  <Select defaultValue=\"utc\">\n                    <SelectTrigger data-testid=\"select-timezone\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"utc\">UTC</SelectItem>\n                      <SelectItem value=\"est\">Eastern Time</SelectItem>\n                      <SelectItem value=\"cst\">Central Time</SelectItem>\n                      <SelectItem value=\"pst\">Pacific Time</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Date Format</label>\n                  <Select defaultValue=\"mdy\">\n                    <SelectTrigger data-testid=\"select-date-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"mdy\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"dmy\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"ymd\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Email Notifications</h3>\n                    <p className=\"text-sm text-muted-foreground\">Receive email updates for critical issues</p>\n                  </div>\n                  <Switch defaultChecked data-testid=\"switch-email-notifications\" />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium\">Auto-sync</h3>\n                    <p className=\"text-sm text-muted-foreground\">Automatically sync data with cloud storage</p>\n                  </div>\n                  <Switch defaultChecked data-testid=\"switch-auto-sync\" />\n                </div>\n              </div>\n              \n              <Button data-testid=\"button-save-system\">Save System Settings</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11752},"client/src/pages/SmartSeverityPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertCircle, Camera, CheckCircle, Clock, TrendingUp, Zap, Upload } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from \"recharts\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst severityData = [\n  { severity: \"Critical\", count: 12, color: \"#ef4444\" },\n  { severity: \"Major\", count: 28, color: \"#f97316\" },\n  { severity: \"Minor\", count: 45, color: \"#eab308\" },\n  { severity: \"Info\", count: 78, color: \"#22c55e\" }\n];\n\nconst predictionAccuracy = [\n  { month: \"Jan\", accuracy: 92 },\n  { month: \"Feb\", accuracy: 89 },\n  { month: \"Mar\", accuracy: 94 },\n  { month: \"Apr\", accuracy: 91 },\n  { month: \"May\", accuracy: 96 },\n  { month: \"Jun\", accuracy: 93 }\n];\n\nconst recentPredictions = [\n  {\n    id: \"PRED-001\",\n    checklistItem: \"Pressure relief valve operation\",\n    predictedSeverity: \"Critical\",\n    confidence: 94,\n    suggestedActions: [\"Replace valve assembly\", \"Inspect secondary systems\", \"Update maintenance log\"],\n    inspector: \"John Smith\",\n    timestamp: new Date(\"2024-01-15T10:30:00\")\n  },\n  {\n    id: \"PRED-002\", \n    checklistItem: \"Wire rope inspection - lifting block\",\n    predictedSeverity: \"Major\",\n    confidence: 87,\n    suggestedActions: [\"Replace wire rope\", \"Lubricate components\", \"Schedule next inspection in 30 days\"],\n    inspector: \"Sarah Jones\",\n    timestamp: new Date(\"2024-01-15T09:15:00\")\n  },\n  {\n    id: \"PRED-003\",\n    checklistItem: \"Safety latch functionality\",\n    predictedSeverity: \"Minor\",\n    confidence: 78,\n    suggestedActions: [\"Clean and lubricate\", \"Adjust tension\", \"Monitor closely\"],\n    inspector: \"Mike Wilson\",\n    timestamp: new Date(\"2024-01-15T08:45:00\")\n  }\n];\n\nconst getSeverityColor = (severity: string) => {\n  switch (severity) {\n    case \"Critical\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n    case \"Major\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n    case \"Minor\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n    default: return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n  }\n};\n\nconst getConfidenceColor = (confidence: number) => {\n  if (confidence >= 90) return \"text-green-600\";\n  if (confidence >= 75) return \"text-yellow-600\";\n  return \"text-red-600\";\n};\n\nexport default function SmartSeverityPage() {\n  const { toast } = useToast();\n  const [selectedPhoto, setSelectedPhoto] = useState<File | null>(null);\n  const [checklistText, setChecklistText] = useState(\"\");\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [selectedRig, setSelectedRig] = useState(\"\");\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.size <= 1024 * 1024) { // 1MB limit\n      setSelectedPhoto(file);\n    } else {\n      toast({\n        title: \"File size error\",\n        description: \"Photo must be under 1MB\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!checklistText.trim() && !selectedPhoto) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please provide checklist text or upload a photo\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsAnalyzing(true);\n    // Simulate AI analysis\n    setTimeout(() => {\n      setIsAnalyzing(false);\n      // Results would be shown in the recent predictions\n    }, 2000);\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-smart-severity\">Smart Severity & Recommendation</h1>\n          <p className=\"text-muted-foreground\">AI-powered severity prediction and corrective action suggestions</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" className=\"gap-1\">\n            <Zap className=\"h-3 w-3\" />\n            AI Enabled\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Analysis Input */}\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5\" />\n              Analyze New Issue\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Select Rig</label>\n              <Select value={selectedRig} onValueChange={setSelectedRig}>\n                <SelectTrigger data-testid=\"select-rig\">\n                  <SelectValue placeholder=\"Choose rig...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rig-001\">Rig-001 (Thunder Bay)</SelectItem>\n                  <SelectItem value=\"rig-002\">Rig-002 (North Sea)</SelectItem>\n                  <SelectItem value=\"rig-003\">Rig-003 (Gulf Coast)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Checklist Item Description</label>\n              <Textarea\n                value={checklistText}\n                onChange={(e) => setChecklistText(e.target.value)}\n                placeholder=\"Describe the issue or inspection item...\"\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-checklist-description\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Upload Photo (Optional)</label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handlePhotoUpload}\n                  className=\"flex-1\"\n                  data-testid=\"input-photo-upload\"\n                />\n                {selectedPhoto && (\n                  <Badge variant=\"secondary\" className=\"gap-1\">\n                    <Camera className=\"h-3 w-3\" />\n                    {selectedPhoto.name}\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">Max file size: 1MB</p>\n            </div>\n\n            <Button \n              onClick={handleAnalyze} \n              disabled={isAnalyzing}\n              className=\"w-full\"\n              data-testid=\"button-analyze\"\n            >\n              {isAnalyzing ? (\n                <>\n                  <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Analyzing...\n                </>\n              ) : (\n                <>\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  Analyze Severity\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Severity Distribution & Accuracy */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Severity Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <PieChart>\n                    <Pie\n                      data={severityData}\n                      dataKey=\"count\"\n                      nameKey=\"severity\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      label={(entry) => `${entry.severity}: ${entry.count}`}\n                    >\n                      {severityData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Prediction Accuracy</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={predictionAccuracy}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis domain={[80, 100]} />\n                    <Tooltip formatter={(value) => [`${value}%`, 'Accuracy']} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"accuracy\" \n                      stroke=\"#22c55e\" \n                      strokeWidth={2}\n                      dot={{ fill: \"#22c55e\", strokeWidth: 2, r: 4 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Predictions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5\" />\n            Recent AI Predictions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {recentPredictions.map((prediction) => (\n              <div key={prediction.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Badge variant=\"outline\">{prediction.id}</Badge>\n                      <Badge className={getSeverityColor(prediction.predictedSeverity)}>\n                        {prediction.predictedSeverity}\n                      </Badge>\n                      <span className={`text-sm font-medium ${getConfidenceColor(prediction.confidence)}`}>\n                        {prediction.confidence}% confidence\n                      </span>\n                    </div>\n                    <h4 className=\"font-medium\">{prediction.checklistItem}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Inspected by {prediction.inspector} • {prediction.timestamp.toLocaleString()}\n                    </p>\n                  </div>\n                  <Progress value={prediction.confidence} className=\"w-20\" />\n                </div>\n                \n                <Separator className=\"my-3\" />\n                \n                <div>\n                  <h5 className=\"text-sm font-medium mb-2\">Suggested Corrective Actions:</h5>\n                  <div className=\"space-y-1\">\n                    {prediction.suggestedActions.map((action, index) => (\n                      <div key={index} className=\"flex items-center gap-2 text-sm\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full flex-shrink-0\" />\n                        <span>{action}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Total Predictions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">1,247</div>\n            <p className=\"text-sm text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Average Accuracy</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">92.3%</div>\n            <p className=\"text-sm text-muted-foreground\">Across all predictions</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Time Saved</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">45.2 hrs</div>\n            <p className=\"text-sm text-muted-foreground\">Inspector time saved</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13042},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CARPanelExample.tsx":{"content":"import { CARPanel } from '../CARPanel'\n\nexport default function CARPanelExample() {\n  return (\n    <div className=\"p-4\">\n      <CARPanel />\n    </div>\n  )\n}","size_bytes":156},"client/src/components/examples/ChecklistViewExample.tsx":{"content":"import { ChecklistView } from '../ChecklistView'\n\nexport default function ChecklistViewExample() {\n  return (\n    <div className=\"p-4\">\n      <ChecklistView />\n    </div>\n  )\n}","size_bytes":176},"client/src/components/examples/DashboardExample.tsx":{"content":"import { Dashboard } from '../Dashboard'\n\nexport default function DashboardExample() {\n  return (\n    <div className=\"p-4\">\n      <Dashboard />\n    </div>\n  )\n}","size_bytes":160},"client/src/components/examples/InspectionTableExample.tsx":{"content":"import { InspectionTable } from '../InspectionTable'\n\nexport default function InspectionTableExample() {\n  return (\n    <div className=\"p-4\">\n      <InspectionTable />\n    </div>\n  )\n}","size_bytes":184},"client/src/components/examples/KPICardExample.tsx":{"content":"import { KPICard } from '../KPICard'\nimport { CheckCircle } from 'lucide-react'\n\nexport default function KPICardExample() {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 p-4\">\n      <KPICard\n        title=\"Total Inspections\"\n        value=\"1,247\"\n        change={{ value: 12, type: \"increase\" }}\n        icon={CheckCircle}\n        description=\"This month\"\n      />\n      <KPICard\n        title=\"Pass Rate\"\n        value=\"78%\"\n        change={{ value: 3, type: \"decrease\" }}\n        icon={CheckCircle}\n        description=\"Overall compliance\"\n      />\n    </div>\n  )\n}","size_bytes":578},"client/src/components/examples/PhotoGalleryExample.tsx":{"content":"import { PhotoGallery } from '../PhotoGallery'\n\nexport default function PhotoGalleryExample() {\n  return (\n    <div className=\"p-4\">\n      <PhotoGallery />\n    </div>\n  )\n}","size_bytes":172},"client/src/components/examples/StatusBadgeExample.tsx":{"content":"import { StatusBadge } from '../StatusBadge'\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex flex-wrap gap-2 p-4\">\n      <StatusBadge status=\"pass\" />\n      <StatusBadge status=\"fail\" />\n      <StatusBadge status=\"pending\" />\n      <StatusBadge status=\"in-progress\" />\n      <StatusBadge severity=\"low\" variant=\"severity\" />\n      <StatusBadge severity=\"medium\" variant=\"severity\" />\n      <StatusBadge severity=\"high\" variant=\"severity\" />\n      <StatusBadge severity=\"critical\" variant=\"severity\" />\n    </div>\n  )\n}","size_bytes":554},"client/src/components/examples/ThemeToggleExample.tsx":{"content":"import { ThemeToggle } from '../ThemeToggle'\nimport { ThemeProvider } from '../ThemeProvider'\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  )\n}","size_bytes":264},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}